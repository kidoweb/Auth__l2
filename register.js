// register.js

import { auth, db } from './firebase-config.js';
import { createUserWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
import { doc, setDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
function generateRandomPassword(length = 16) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
    let password = '';
    for (let i = 0; i < length; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
document.getElementById('generate-password-btn').addEventListener('click', () => {
    const password = generateRandomPassword();
    document.getElementById('password').value = password;
    document.getElementById('confirm-password').value = password;
    updatePasswordStrength(password);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
function togglePasswordVisibility(passwordId, toggleButtonId) {
    const passwordField = document.getElementById(passwordId);
    const toggleButton = document.getElementById(toggleButtonId);
    toggleButton.addEventListener('click', () => {
        const type = passwordField.type === 'password' ? 'text' : 'password';
        passwordField.type = type;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≥–ª–∞–∑–∏–∫–∞
        toggleButton.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
    });
}

// –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª–µ–π –ø–∞—Ä–æ–ª—è
togglePasswordVisibility('password', 'toggle-password');
togglePasswordVisibility('confirm-password', 'toggle-confirm-password');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
function checkPasswordStrength(password) {
    const s_letters = "qwertyuiopasdfghjklzxcvbnm"; // –ë—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    const b_letters = "QWERTYUIOPLKJHGFDSAZXCVBNM"; // –ë—É–∫–≤—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    const digits = "0123456789"; // –¶–∏—Ñ—Ä—ã
    const specials = "!@#$%^&*()_-+=\\|/.,:;[]{}"; // –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    let is_s = false, is_b = false, is_d = false, is_sp = false;

    for (let char of password) {
        if (!is_s && s_letters.includes(char)) is_s = true;
        if (!is_b && b_letters.includes(char)) is_b = true;
        if (!is_d && digits.includes(char)) is_d = true;
        if (!is_sp && specials.includes(char)) is_sp = true;
    }

    let rating = 0;
    if (is_s) rating++;
    if (is_b) rating++;
    if (is_d) rating++;
    if (is_sp) rating++;

    let strength = "";
    let color = "";

    if (password.length < 6 && rating < 3) {
        strength = "–ü—Ä–æ—Å—Ç–æ–π";
        color = "red";
    } else if (password.length < 6 && rating >= 3) {
        strength = "–°—Ä–µ–¥–Ω–∏–π";
        color = "orange";
    } else if (password.length >= 8 && rating < 3) {
        strength = "–°—Ä–µ–¥–Ω–∏–π";
        color = "orange";
    } else if (password.length >= 8 && rating >= 3) {
        strength = "–°–ª–æ–∂–Ω—ã–π";
        color = "green";
    } else if (password.length >= 6 && rating === 1) {
        strength = "–ü—Ä–æ—Å—Ç–æ–π";
        color = "red";
    } else if (password.length >= 6 && rating > 1 && rating < 4) {
        strength = "–°—Ä–µ–¥–Ω–∏–π";
        color = "orange";
    } else if (password.length >= 6 && rating === 4) {
        strength = "–°–ª–æ–∂–Ω—ã–π";
        color = "green";
    } else {
        strength = "";
    }

    return { strength, color };
}

function updatePasswordStrength(password) {
    const { strength, color } = checkPasswordStrength(password);
    const strengthIndicator = document.getElementById('password-strength');
    strengthIndicator.textContent = strength ? `–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è: ${strength}` : '';
    strengthIndicator.style.color = color;
}

document.getElementById('password').addEventListener('input', (e) => {
    const password = e.target.value;
    updatePasswordStrength(password);
});

document.getElementById('registration-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const email = document.getElementById('email').value.trim();
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    const fullname = document.getElementById('fullname').value.trim();
    const nickname = document.getElementById('nickname').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const gender = document.getElementById('gender').value;
    const avatarUrl = document.getElementById('avatar-url').value.trim();

    if (password !== confirmPassword) {
        alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        return;
    }

    const fieldsToCheck = { email, password, confirmPassword, nickname, phone, avatarUrl };
    for (const [key, value] of Object.entries(fieldsToCheck)) {
        if (/\s/.test(value)) {
            alert(`–ü–æ–ª–µ "${key}" –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!`);
            return;
        }
    }

    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;

        await setDoc(doc(db, "users", user.uid), {
            email: email,
            fullname: fullname || "",
            nickname: nickname || "",
            phone: phone || "",
            gender: gender || "",
            avatarUrl: avatarUrl || "",
            registrationDate: serverTimestamp()
        });

        alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
        window.location.href = "profile.html";
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        alert(error.message);
    }
});
